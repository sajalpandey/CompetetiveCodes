/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //int index=0;
    TreeNode *helper(vector<int>&inorder,vector<int>&postorder,int l,int r,unordered_map<int,int> &mp,int *p)
    {
        if(l>r)
            return NULL;
        TreeNode *root=new TreeNode(postorder[(*p)]);
        (*p)--;
        if(l==r)
            return root;
        int findEle=mp[root->val];
        root->right=helper(inorder,postorder,findEle+1,r,mp,p);
        root->left=helper(inorder,postorder,l,findEle-1,mp,p);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()==0 && postorder.size()==0)
            return NULL;
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++)
            mp[inorder[i]]=i;
        int index=inorder.size()-1;
        return helper(inorder,postorder,0,inorder.size()-1,mp,&index);
    }
};