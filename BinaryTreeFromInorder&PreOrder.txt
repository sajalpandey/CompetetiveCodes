/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */    

class Solution {
public:
    TreeNode *NewTree(vector<int>& preorder,vector<int> &inorder,int l,int r)
    {
        if(l>r)
            return NULL;
        static int index=0;
        TreeNode * root=new TreeNode(preorder[index++]);
        int findEle;
        if(l==r)
            return root;
        for(int i=l;i<=r;i++)
        {
            if(inorder[i]==root->val)
            {
                findEle=i;
                break;
            }
        }
        root->left=NewTree(preorder,inorder,l,findEle-1);
        root->right=NewTree(preorder,inorder,findEle+1,r);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()==0 && inorder.size()==0)
            return NULL;
        return NewTree(preorder,inorder,0,inorder.size()-1);
    }
};