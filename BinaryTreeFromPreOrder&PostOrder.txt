/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int index=0;
    TreeNode *helper(vector<int>&pre,vector<int>&post,int l,int r,int size)
    {
        if(index>=size ||l>r)
            return NULL;
        TreeNode *root=new TreeNode(pre[index]);
        (index)++;
        if(l==r)
            return root;
        int findEle;
        for(int i=l;i<=r;i++)
        {
            if(pre[index]==post[i])
            {
                findEle=i;
                break;
            }
        }
        if(findEle<=r)
        {
            root->left=helper(pre,post,l,findEle,size);
            root->right=helper(pre,post,findEle+1,r-1,size);
        }
        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        if(pre.size()==0 && post.size()==0)
            return NULL;
       
        return helper(pre,post,0,pre.size()-1,pre.size());
    }
};