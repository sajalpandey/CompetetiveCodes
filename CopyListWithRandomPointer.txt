/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
            return NULL;
        Node *curr=head,*ptr;
        //inserting new node between two nodes of original list
        while(curr)
        {
            ptr=curr->next;
            Node *clone=new Node(curr->val);
            curr->next=clone;
            clone->next=ptr;
            curr=ptr;
        }
        
        curr=head;
        while(curr && curr->next)
        {
            if(curr->random)
                curr->next->random=curr->random->next;
            curr=curr->next->next;
        }
        
        //dummy=head->next;
        Node *temp=head->next;
        curr=head,ptr=head->next;
        while(ptr && curr)
        {
            curr->next=curr->next?curr->next->next:curr->next;
            ptr->next=ptr->next?ptr->next->next:ptr->next;
            curr=curr->next;
            ptr=ptr->next;
        }
        //ptr->next=NULL;
        return temp;
    }
};