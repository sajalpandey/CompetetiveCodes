class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend==0)
            return 0;
        int sign=1;
        if((dividend <0 && divisor >0) || (dividend >0 && divisor<0))
            sign=-1;
        long long int dd=labs(dividend),ds=labs(divisor),count=0;
        // corner case when divi=INT_MIN and divi=-1
        if(dividend ==INT_MIN && divisor ==-1)
            return INT_MAX;
        
        while(dd >= ds)
        {
            long int tmp=ds , m=1;          //dd=15 , ds=3
            while(tmp<<1 < dd)              //3<<1 =6,m=2 -> tmp=6<<1=12,m=4
            {                               //dd=15-tmp(12) count=count+4;
                //tmp<<=1;                  //dd=3 and count=4 -> go for next iteration
                tmp=tmp<<1;
                m=m<<1;
            }
            
            dd-=tmp;
            count+=m;
        }
        return sign*count;
    }
};