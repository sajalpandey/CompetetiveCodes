class Solution {
public:
    
    int BinaryFirst(int l,int h,int target,vector<int>& nums)
    {
        int result=-1;
        while(l<=h)
        {
            int mid=(l+h)/2;
            if(nums[mid]==target)
            {
                result=mid;
                h=mid-1;
            }
            else if(nums[mid]<target)
                l=mid+1;
            else
                h=mid-1;
        }
        return result;
    }
    int BinaryLast(int l,int h,int target,vector<int>& nums)
    {
        int result=-1;
        while(l<=h)
        {
            int mid=(l+h)/2;
            if(nums[mid]==target)
            {
                result=mid;
                l=mid+1;
            }
            else if(nums[mid]<target)
                l=mid+1;
            else
                h=mid-1;
        }
        return result;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        ans.push_back(BinaryFirst(0,nums.size()-1,target,nums));
        ans.push_back(BinaryLast(0,nums.size()-1,target,nums));
        return ans;
    }
};