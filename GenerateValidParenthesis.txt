class Solution {
public:
    void backtrack(vector<string>&ans,string str,int open,int close,int n)
    {
        if(close==n)
        {
            ans.push_back(str);
            return ;
        }
        //open a bracket when count of open is < N
        //cloase a bracket when count of open is > count of close 
        if(open<n)
            backtrack(ans,str+'(',open+1,close,n);
        if(close<open)
            backtrack(ans,str+')',open,close+1,n);
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        backtrack(ans,"",0,0,n);
        return ans;
    }
};