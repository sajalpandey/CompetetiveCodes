class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        if(heights.size()==0)
            return 0;
        int i=0,maxArea=-1,area=0;
        stack<int> st;
        while(i<heights.size())
        {
            if(st.empty()==true || heights[st.top()]<=heights[i])
                st.push(i++);
            else
            {
                int tp=st.top();
                st.pop();
                if(st.empty()==true)
                    area=heights[tp]*i;
                else
                {
                    area=heights[tp]*(i-st.top()-1);
                }
            }
            if(area>maxArea)
                maxArea=area;
        }
        
        while(!st.empty())
        {
            int tp=st.top();
            st.pop();
            if(st.empty()==true)
                area=heights[tp]*i;
            else
            {
                area=heights[tp]*(i-st.top()-1);
            }
            if(area>maxArea)
                maxArea=area;
        }
        
        return maxArea;
    }
     
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.size()==0)
            return 0;
        vector<int> v;
        for(int i=0;i<matrix[0].size();i++)
            v.push_back(matrix[0][i]-'0');
        int ans=0;
        ans=largestRectangleArea(v);
        for(int i=1;i<matrix.size();i++)
        {
            v.clear();
            for(int j=0;j<matrix[i].size();j++)
            {
                
                if(matrix[i][j]=='1')
                    matrix[i][j]='0'+ (matrix[i][j]-48+ matrix[i-1][j]-48);
                v.push_back(matrix[i][j]-'0');
                //cout<<matrix[i][j]<<" ";
            }
            //cout<<endl;
            ans=max(ans,largestRectangleArea(v));
        }
        return ans;
    }
};