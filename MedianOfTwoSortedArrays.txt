class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()>nums2.size())
            return findMedianSortedArrays(nums2,nums1);
        
        int low=0;
        int high=nums1.size();
        int maxleftx,minrightx,maxlefty,minrighty,partx,party;
        while(low<=high)
        {
            partx=(low+high)/2;
            
            party=(nums1.size()+nums2.size()+1)/2-partx;
            
            maxleftx=(partx==0)?INT_MIN:nums1[partx-1];
            minrightx=(partx==nums1.size())?INT_MAX:nums1[partx];
    
            maxlefty=(party==0)?INT_MIN:nums2[party-1];
            minrighty=(party==nums2.size())?INT_MAX:nums2[party];
            
            if(maxleftx<=minrighty && maxlefty<=minrightx) //found
            {
                if((nums1.size()+nums2.size())%2==0)
                {
                    return ((double)(max(maxleftx,maxlefty)+min(minrightx,minrighty))/2);
                }
                else
                    return (double)(max(maxleftx,maxlefty));
            }
            
            else if(maxleftx>minrighty)
                high=partx-1;
            else if(maxlefty>minrightx)
                low=partx+1;
        }
        
        return 0.0;
    }
};