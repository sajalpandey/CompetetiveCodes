/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *merge(ListNode *a,ListNode*b)
    {
        ListNode *source=NULL;
        if(a==NULL)
            return b;
        if(b==NULL)
            return a; 
        if(a->val<=b->val)
        {
            source=a;
            source->next=merge(a->next,b);
        }
        else
        {
            source=b;
            source->next=merge(a,b->next);
        }
        return source;
    }
   
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode *slow=head,*fast=head->next;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        
        fast=slow->next;
        slow->next=NULL;
        
        return merge(sortList(head),sortList(fast));
    }
};