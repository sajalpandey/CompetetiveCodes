/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    struct compare {
    bool operator()(const ListNode* l, const ListNode* r) {
        return l->val > r->val;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0)
            return NULL;
        if(lists.size()==1)
            return lists[0];
        //using priority queue create min heap
        
        
        priority_queue<ListNode*,vector<ListNode*>,compare> pq;
        for(auto m:lists)
            if(m)
                pq.push(m);
        
        ListNode *dummy=new ListNode(0);
        ListNode *ptr=dummy;
        while(!pq.empty())
        {
            ptr->next=pq.top();
            pq.pop();
            ptr=ptr->next;
            if(ptr->next)
                pq.push(ptr->next);
        }
        return dummy->next;
        
        //simple merging lists one by one
        if(lists.size()==0)
            return NULL;
        if(lists.size()==1)
            return lists[0];
        ListNode *p,*q;
        for(int i=lists.size()-1;i>0;i--)
        {
            p=lists[i],q=lists[i-1];
            ListNode *dummy=new ListNode(0);
            ListNode *ptr=dummy;
            while(p || q)
            {
                if(!p)
                {
                    ptr->next=q;
                    break;
                }
                else if(!q)
                {
                    ptr->next=p;
                    break;
                }
                else if(p && q&& p->val<=q->val)
                {
                    ptr->next=p;
                    p=p->next;
                }    
                else 
                {
                    ptr->next=q;
                    q=q->next;
                }
                ptr=ptr->next;   
            }
            lists.pop_back();
            lists.pop_back();
            lists.push_back(dummy->next);
        }
        return lists[0];
    }
};