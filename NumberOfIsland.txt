class Solution {
public:
    void bfsTraversal(vector<vector<char>>&grid,int row,int col)
    {
        if(grid.size()==0)
            return;
        queue<pair<int,int>> q;
        q.emplace(make_pair(row,col));
        while(q.empty()==false)
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            // if(x<0 || y<0 || x>=grid.size() || y>=grid[0].size())
            // continue;
            if(x-1>=0 && grid[x-1][y]=='1')
            {
                q.emplace(make_pair(x-1,y));
                grid[x-1][y]='0';
            }
            if((x+1)<grid.size() && grid[x+1][y]=='1'){
                q.emplace(make_pair(x+1,y));
                grid[x+1][y]='0';
            }
            if(y-1>=0 && grid[x][y-1]=='1'){
                q.emplace(make_pair(x,y-1));
                grid[x][y-1]='0';
            }
            if((y+1)<grid[0].size() && grid[x][y+1]=='1'){
                q.emplace(make_pair(x,y+1));
                grid[x][y+1]='0';
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int count=0;
        if(grid.size()==0)
            return 0;
        int row=grid.size(),col=grid[0].size();
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j]=='1')
                {
                    ++count;
                    bfsTraversal(grid,i,j);
                }
            }
        }
        return count;
    }
};