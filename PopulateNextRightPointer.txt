/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        //METHOD _1
        if(!root)
            return NULL;
        queue<Node *> q;
        q.emplace(root);
        int size;
        Node * tmp;
        while(!q.empty())
        {
            size=q.size();
            for(int i=0;i<size;i++)
            {
                tmp=q.front();
                q.pop();
                tmp->next=i<size-1?q.front():NULL;
                if(tmp->left)
                    q.emplace(tmp->left);
                if(tmp->right)
                    q.emplace(tmp->right);
            }
        }
        
        //METHOD 2
        Node * cur=root,*tmp;
        while(cur->left)
        {
            tmp=cur;
            while(tmp)
            {
                tmp->left->next=tmp->right;
                if(tmp->next)
                    tmp->right->next=tmp->next->left;
                tmp=tmp->next;
            }
            cur=cur->left;
        }
        return root;
    }
};