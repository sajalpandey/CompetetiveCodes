class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char,int> mp;
        for(int i=0;i<tasks.size();i++)
            mp[tasks[i]]++;
        priority_queue<int> pq;
        for(auto m:mp)
            pq.push(m.second);
        int gap=(pq.top()-1)*n,ans=pq.top()+gap;
        int max=pq.top();
        pq.pop();
        
        //while queue not empty
        while(!pq.empty())
        {
            //substract max frequency from gaps to fill out
            if(pq.top()<=gap)
            {
                //if frequency is equal total length will increse by 1
                if(pq.top()==max)
                {
                    gap=gap-(pq.top()-1);
                    ans++;
                }
                else
                {
                    gap=gap-pq.top();
                }
                pq.pop();
            }
            //if gap is zero return length of tasks
            else
                return tasks.size();
        }
        return ans;
    }
};