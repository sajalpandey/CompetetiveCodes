class Solution {
public:
    int ladderLength(string bword, string eword, vector<string>& wordList) {
        if(bword.size()==0 || eword.size()==0 || bword==eword)
            return 0;
        unordered_set<string> s;
        for(auto m:wordList)
            s.insert(m);
        queue<string> q;
        q.emplace(bword);
        int ladder=1;
        while(!q.empty())
        {
            int n=q.size();
            for(int x=0;x<n;x++)
            {
                string word=q.front();
                q.pop();
                if(word==eword)
                    return ladder;
                
                for(int i=0;i<word.size();i++)
                {
                    char ch=word[i];
                    for(int j=0;j<26;j++)
                    {
                        word[i]='a'+j;
                        if(s.find(word)!=s.end())
                        {
                            s.erase(word);
                            q.emplace(word);
                        }
                    }
                    word[i]=ch;
                }
            }
            ladder++;  
        }
        return 0;
    }
};